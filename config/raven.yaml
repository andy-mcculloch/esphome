esphome:
  name: raven
  friendly_name: Raven

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret raven-api-key

  services:
  - service: dfplayer_next
    then:
      - dfplayer.play_next:
  - service: dfplayer_previous
    then:
      - dfplayer.play_previous:
  - service: dfplayer_play
    variables:
      file: int
    then:
      - dfplayer.play: !lambda 'return file;'
  - service: dfplayer_play_loop
    variables:
      file: int
      loop_: bool
    then:
      - dfplayer.play:
          file: !lambda 'return file;'
          loop: !lambda 'return loop_;'
  - service: dfplayer_play_folder
    variables:
      folder: int
      file: int
    then:
      - dfplayer.play_folder:
          folder: !lambda 'return folder;'
          file: !lambda 'return file;'

  - service: dfplayer_play_loop_folder
    variables:
      folder: int
    then:
      - dfplayer.play_folder:
          folder: !lambda 'return folder;'
          loop: true

  - service: dfplayer_set_device_tf
    then:
      - dfplayer.set_device: TF_CARD

  - service: dfplayer_set_device_usb
    then:
      - dfplayer.set_device: USB

  - service: dfplayer_set_volume
    variables:
      volume: int
    then:
      - dfplayer.set_volume: !lambda 'return volume;'
  - service: dfplayer_set_eq
    variables:
      preset: int
    then:
      - dfplayer.set_eq: !lambda 'return static_cast<dfplayer::EqPreset>(preset);'

  - service: dfplayer_sleep
    then:
      - dfplayer.sleep

  - service: dfplayer_reset
    then:
      - dfplayer.reset

  - service: dfplayer_start
    then:
      - dfplayer.start

  - service: dfplayer_pause
    then:
      - dfplayer.pause

  - service: dfplayer_stop
    then:
      - dfplayer.stop

  - service: dfplayer_random
    then:
      - dfplayer.random

  - service: dfplayer_volume_up
    then:
      - dfplayer.volume_up

  - service: dfplayer_volume_down
    then:
      - dfplayer.volume_down

ota:
  - platform: esphome
    password: !secret raven-ota-password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Raven Fallback Hotspot"
    password: !secret raven-ap-password

captive_portal:

# Example configuration entry
stepper:
  - platform: uln2003
    id: my_stepper
    pin_a: D0
    pin_b: D1
    pin_c: D2
    pin_d: D3
    max_speed: 250 steps/s

    # Optional:
    acceleration: inf
    deceleration: inf
    sleep_when_done: true

number:
  - platform: template
    name: Neck Control
    min_value: -200
    initial_value: 0
    max_value: 200
    step: 10
    set_action:
      then:
        - stepper.set_target:
            id: my_stepper
            target: !lambda 'return x;'

  - platform: template
    name: Beak Control
    min_value: 18
    initial_value: 30
    max_value: 50
    step: 1
    optimistic: true
    set_action:
      then:
        - servo.write:
            id: my_servo
            level: !lambda 'return x / 100.0;'

servo:
  - id: my_servo
    output: servo_pwm

output:
  - platform: esp8266_pwm
    id: servo_pwm
    pin: D4
    frequency: 50 Hz
  - platform: esp8266_pwm
    pin: D7
    frequency: 1000 Hz
    id: led_pwm
    inverted: true


light:
  - platform: monochromatic
    name: Raven Eyes
    id: raven_eyes
    output: led_pwm
    effects:
      - pulse:
          name: slow Pulse
          transition_length: 5s
          update_interval: 5s
    restore_mode: ALWAYS_ON
    on_turn_on:
      light.turn_on:
        id: raven_eyes
        effect: slow Pulse

# DFPLayer Mini MP3 player 
uart:
  tx_pin: D6
  rx_pin: D5
  baud_rate: 9600

dfplayer:
  on_finished_playback:
    then:
      logger.log: 'Playback finished event'
